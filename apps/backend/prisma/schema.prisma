// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// generator custom_generator {
//   provider = "prisma-generator-fake-data"
//   /// by default, the file will be generated at `./prisma/fake-data.ts`
// }

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

enum UserRole {
  ADMIN
  CUSTOMER
  MODERATOR
  MECHANIC
}

enum ApprovalStatus {
  PENDING
  ACCEPTED
  REJECTED
  REUPLOAD_REQUESTED
}

enum VehicleType {
  SEDAN
  HATCHBACK
  SUV
  TRUCK
  TRACTOR
}

enum VehicleFuelType {
  ELECTRIC
  GAS
  PETROL
  DIESEL
}

enum VehicleUseType {
  SPORT
  SEMISPORT
  COMMERCIAL
  NONCOMMERCIAL
}

enum VehicleWheels {
  TWO
  FOUR
}

model Address {
  id              String            @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  ///FAKE: faker.location.latitude()
  lat             Float
  ///FAKE: faker.location.longitude()
  long            Float
  ///FAKE: faker.location.zipCode('####')
  zipcode         String
  ///FAKE: faker.location.street()
  street          String
  suburb          String
  ///FAKE: faker.location.cityName()
  city            String
  name            String?
  landmark        String?
  User            User?             @relation(fields: [userId], references: [id])
  userId          String?           @db.Uuid
  ApprovalRequest ApprovalRequest[]
  Vehicle         Vehicle[]

  @@unique([street, suburb, city, zipcode])
  @@index([zipcode])
  @@index([suburb])
}

model User {
  id              String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  ///FAKE: faker.firstName()
  firstName       String
  ///FAKE: faker.lastName()
  lastName        String
  ///FAKE: faker.phone()
  phoneNumber     String    @unique
  ///FAKE: faker.internet.email()
  email           String?   @unique
  isPhoneVerified Boolean?  @default(false)
  verifiedOn      DateTime?
  role            UserRole  @default(CUSTOMER)
  isBanned        Boolean?  @default(false)
  mechanic        Mechanic?
  customer        Customer?

  savedAddresses Address[]
  // Timestamps
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([id, phoneNumber])
  @@index([id])
  @@index([email])
  @@index([isPhoneVerified])
}

model Mechanic {
  id String @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid

  vehicleTypes    VehicleType
  vehicleFuelType VehicleFuelType
  vehicleUseType  VehicleUseType
  vehicleWheels   VehicleWheels
  approvalRequest ApprovalRequest?

  description         String?   @db.Text
  profilePic          String
  rating              Float?    @default(0)
  level               Int?      @default(1)
  reviews             Review[]
  hasAgreedToPolicies Boolean
  avv                 String?
  certifications      String[]
  licences            String[]
  available           Boolean   @default(false)
  deviceIds           String[]
  user                User      @relation(fields: [userId, phoneNumber], references: [id, phoneNumber])
  Booking             Booking[]

  userId           String            @unique @db.Uuid
  phoneNumber      String            @unique
  Order            Order[]
  // reviewId    String  @db.Uuid
  InspectionReport InspectionReport?

  @@unique([userId, phoneNumber])
  @@index([available])
  @@index([id])
  @@index([phoneNumber])
}

model Customer {
  id                    String                 @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  profilePic            String?
  alternateNumber       String?
  user                  User                   @relation(fields: [userId, phoneNumber], references: [id, phoneNumber])
  cars                  Vehicle[]              @relation("Owner")
  bookings              Booking[]              @relation("BookingOwner")
  userId                String                 @unique @db.Uuid
  email                 String?                @unique
  phoneNumber           String                 @unique
  Order                 Order[]
  Review                Review[]
  StripeCustomerAccount StripeCustomerAccount?

  @@unique([userId, phoneNumber])
  @@index([id])
  @@index([phoneNumber])
}

model Seller {
  id          String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name        String
  ///FAKE: faker.person.lastName()
  lastname    String
  ///FAKE: faker.internet.email()
  email       String
  ///FAKE: faker.phone()
  phoneNumber String
  Vehicle     Vehicle[]
}

model Vehicle {
  id String @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid

  // Categorization
  carType    VehicleType
  fuelType   VehicleFuelType
  useType    VehicleUseType
  noOfWheels VehicleWheels

  // Relationships
  ownerId          String   @db.Uuid
  owner            Customer @relation("Owner", fields: [ownerId], references: [id])
  vehicleAddress   Address  @relation(fields: [vehicleAddressId], references: [id])
  vehicleAddressId String   @db.Uuid
  booking          Booking?
  seller           Seller?  @relation(fields: [sellerId], references: [id])
  sellerId         String?  @db.Uuid

  // Specifics
  make      String
  model     String
  year      String
  regNumber String

  @@index([id])
  @@index([ownerId])
}

// service schema

model InspectionService {
  id      String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name    String    @unique
  Booking Booking[]
}

model Booking {
  id                String            @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  owner             Customer          @relation("BookingOwner", fields: [ownerId], references: [id])
  ownerId           String            @db.Uuid
  package           Package           @relation(fields: [packageId], references: [id])
  packageId         String            @db.Uuid
  service           InspectionService @relation(fields: [inspectionServiceId], references: [id])
  vehicle           Vehicle           @relation(fields: [vehicleId], references: [id])
  vehicleId         String            @unique @db.Uuid
  mechanic          Mechanic?         @relation(fields: [mechanicId], references: [id])
  mechanicId        String?           @db.Uuid
  dateTimeOfBooking DateTime

  // Timestamps
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  inspectionServiceId String            @db.Uuid
  Order               Order[]
  InspectionReport    InspectionReport?
}

model Package {
  id          String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  bookings    Booking[]
  price       Int
  strikePrice Int?
  name        String    @unique
  description String    @db.Text
  items       String[]
  perks       String[]
  orders      Order[]
}

model Order {
  id           String   @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  initiatedBy  Customer @relation(fields: [customerId], references: [id])
  customerId   String   @db.Uuid
  package      Package  @relation(fields: [packageId], references: [id])
  packageId    String   @db.Uuid
  booking      Booking  @relation(fields: [bookingId], references: [id])
  bookingId    String   @db.Uuid
  isFullfilled Boolean
  // paymentId given by the payments provider 
  paymentId    String?

  fulfilledBy     Mechanic? @relation(fields: [mechanicId], references: [id])
  mechanicId      String?   @db.Uuid
  totalOrderValue Int
}

enum MechanicExperience {
  UnderOneYear
  UnderTwoYears
  UnderThreeYears
  UnderFiveYears
  MoreThanFiveYears
}

model ApprovalRequest {
  id                             String             @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  status                         ApprovalStatus
  certificate_3                  String
  certificate_4                  String?
  publicLiabilityInsurance       String
  professionalIndemnityInsurance String?
  ausIdentificationDoc           String
  ABN                            String
  workshopAddress                Address?           @relation(fields: [addressId], references: [id])
  addressId                      String             @db.Uuid
  experience                     MechanicExperience
  Mechanic                       Mechanic           @relation(fields: [mechanicId], references: [id])
  mechanicId                     String             @unique @db.Uuid

  @@unique([status, id, experience, ABN])
}

model Review {
  id         String   @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  isVerified Boolean?
  message    String?
  rating     Float
  photos     String[]
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @db.Uuid
  Mechanic   Mechanic @relation(fields: [mechanicId], references: [id])
  mechanicId String   @db.Uuid
}

model Notification {
  id String @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
}

model StripeCustomerAccount {
  id               String   @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  stripeCustomerId String
  paymentIntents   Json? // validate this fields externally (prisma doesn't support json schema's to validate on fields)
  paymentMethods   Json? // validate this fields externally (prisma doesn't support json schema's to validate on fields)
  customer         Customer @relation(fields: [customerId], references: [id])
  customerId       String   @unique @db.Uuid
}

enum Transmission {
  AUTOMATIC
  MANUAL
  HYBRID
}

model InspectionReport {
  id                     String       @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  booking                Booking      @relation(fields: [bookingId], references: [id])
  bookingId              String       @unique @db.Uuid
  mechanic               Mechanic     @relation(fields: [mechanicId], references: [id])
  mechanicId             String       @unique @db.Uuid
  odometer               Int
  vehicleColor           String
  transmission           Transmission
  engineAndPeripherals   Json
  transmissionDrivetrain Json
  bodyStructure          Json
  interior               Json
  suspensionAndBrakes    Json
  wheelsAndTires         Json
  finalChecks            Json
  additionalComments     String       @db.Text()
  recommendation         Json
  url                    String
}
